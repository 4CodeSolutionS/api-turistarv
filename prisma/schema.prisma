// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PARTNER
  GUEST
  SUPER
}

enum Tourist {
  CARAVANISTA
  ADMIRADOR
}

enum Vehicle {
  MOTORHOME
  TRAILER
  CAMPER
  TENT
}

model User {
  id              String   @id @unique @default(uuid())
  idCustomerAsaas String?
  name            String
  email           String   @unique
  password        String
  phone           String
  passport        String?  @unique
  gender          String
  dateBirth       DateTime
  cpf             String?  @unique
  rvLength        Decimal
  tugPlate        String
  rvPlate         String
  touristType     Tourist
  vehicleType     Vehicle
  emailActive     Boolean  @default(false)
  role            Role     @default(GUEST)
  createdAt       DateTime @default(now())

  leads         Lead[]
  posts         Post[]
  acommodations Acommodation[]
  address       Address[]
  tokens        Token[]

  @@map("users")
}

model Token {
  id         String   @id @unique @default(uuid())
  token      String   @unique
  expireDate DateTime
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
  idUser String

  @@map("tokens")
}

model Lead {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  user   User   @relation(fields: [idUser], references: [id])
  idUser String

  @@map("leads")
}

model Post {
  id        String   @id @unique @default(uuid())
  title     String
  body      String
  image     String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  user   User?   @relation(fields: [idUser], references: [id])
  idUser String?

  @@map("posts")
}

model Box {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  acommodation   Acommodation? @relation(fields: [idAcommodation], references: [id])
  idAcommodation String?

  @@map("boxes")
}

model Acommodation {
  id            String  @id @unique @default(uuid())
  name          String
  images        String
  convenience   String
  propertyRules String
  active        Boolean @default(true)

  user   User   @relation(fields: [idUser], references: [id])
  idUser String

  boxes Box[]

  @@map("acommodations")
}

model Address {
  id         String @id @unique @default(uuid())
  street     String
  num        String
  district   String
  city       String
  state      String
  country    String
  zipCode    String
  complement String
  reference  String

  user           User          @relation(fields: [idUser], references: [id])
  idUser         String
  Announcement   Announcement? @relation(fields: [idAnnouncement], references: [id])
  idAnnouncement String?

  @@map("addresses")
}

enum Status {
  ACTIVE
  EXPIRED
  INATIVE
}

model Announcement {
  id              String   @id @unique @default(uuid())
  title           String
  description     String
  image           String
  publicationDate DateTime @default(now())
  expirationDate  DateTime
  category        String
  price           Decimal
  contactInfo     String
  status          Status   @default(ACTIVE)
  emphasis        Boolean  @default(false)
  views           Int      @default(0)
  rate            Int      @default(0)
  linkDetails     String

  address Address[]

  @@map("announcements")
}
