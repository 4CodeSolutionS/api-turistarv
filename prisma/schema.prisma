// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PARTNER
  GUEST
  SUPER
}

model User {
  id              String    @id @unique @default(uuid())
  idCustomerAsaas String?
  name            String
  email           String    @unique
  password        String
  phone           String?
  passport        String?   @unique
  dateBirth       DateTime?
  cpf             String?   @unique
  emailActive     Boolean   @default(false)
  role            Role      @default(GUEST)
  createdAt       DateTime  @default(now())

  address Address[]
  Token   Token[]

  @@map("users")
}

model Token {
  id         String   @id @unique @default(uuid())
  token      String   @unique
  expireDate DateTime
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
  idUser String

  @@map("tokens")
}

model Lead {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  @@map("leads")
}

model Post {
  id     String   @id @unique @default(uuid())
  title  String
  body   String
  date   DateTime @default(now())
  active Boolean  @default(true)
  image  String

  @@map("posts")
}

model Address {
  id             String        @id @unique @default(uuid())
  user           User?         @relation(fields: [idUser], references: [id])
  idUser         String?
  Announcement   Announcement? @relation(fields: [idAnnouncement], references: [id])
  idAnnouncement String?
  street         String
  num            Decimal
  district       String
  city           String
  state          String
  country        String
  zipCode        Decimal
  complement     String?
  reference      String?

  @@map("addresses")
}

enum Status {
  ACTIVE
  EXPIRED
  INATIVE
}

model Announcement {
  id              String   @id @unique @default(uuid())
  title           String
  description     String
  image           String
  publicationDate DateTime @default(now())
  expirationDate  DateTime
  category        String
  price           Decimal
  contactInfo     String
  status          Status   @default(ACTIVE)
  emphasis        Boolean  @default(false)
  views           Int      @default(0)
  rate            Int      @default(0)
  linkDetails     String

  address Address[]

  @@map("announcements")
}

model Key {
  id        String   @id @unique @default(uuid())
  idUser    String?  @unique
  active    Boolean  @default(false)
  key       String   @unique
  createdAt DateTime @default(now())

  @@map("keys")
}

model Image {
  id        String  @id @unique @default(uuid())
  camping   Camping @relation(fields: [idCamping], references: [id])
  idCamping String
  url       String

  @@map("images")
}

model Camping {
  id            String  @id @unique @default(uuid())
  name          String  @unique
  propertyRules String
  active        Boolean

  // Box Box[]
  images Image[]

  @@map("campings")
}
